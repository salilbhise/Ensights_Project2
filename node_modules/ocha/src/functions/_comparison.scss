@function -ocha-equal($assert, $expected) {
  $actual: map-get($assert, value);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($actual, $expected, $assert,
      '#{$actual} equals #{$expected}',
      'Expected #{$actual} to not equal #{$expected}'
    );
  }
  @else {
    @return -ocha-check-equal($actual, $expected, $assert,
      '#{$actual} does not equal #{$expected}',
      'Expected #{$actual} to equal #{$expected}'
    );
  }

  @return $assert;
}

@function -ocha-above($assert, $floor) {
  $value: -ocha-comparison-value($assert);
  $result: if($value > $floor, true, false);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($result, true, $assert,
      '#{$value} is greater than #{$floor}',
      'Expected #{$value} to be greater than #{$floor}'
    );
  }
  @else {
    @return -ocha-check-equal($result, false, $assert,
      '#{$value} is not greater than #{$floor}',
      'Expected #{$value} to not be greater than #{$floor}'
    );
  }

  @return $assert;
}

@function -ocha-least($assert, $floor) {
  $value: -ocha-comparison-value($assert);
  $result: if($value >= $floor, true, false);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($result, true, $assert,
      '#{$value} is at least #{$floor}',
      'Expected #{$value} to be at least #{$floor}'
    );
  }
  @else {
    @return -ocha-check-equal($result, false, $assert,
      '#{$value} is not at least #{$floor}',
      'Expected #{$value} to not be at least #{$floor}'
    );
  }

  @return $assert;
}

@function -ocha-below($assert, $ceiling) {
  $value: -ocha-comparison-value($assert);
  $result: if($value < $ceiling, true, false);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($result, true, $assert,
      '#{$value} is less than #{$ceiling}',
      'Expected #{$value} to be less than #{$ceiling}'
    );
  }
  @else {
    @return -ocha-check-equal($result, false, $assert,
      '#{$value} is not less than #{$ceiling}',
      'Expected #{$value} to not be less than #{$ceiling}'
    );
  }

  @return $assert;
}

@function -ocha-most($assert, $ceiling) {
  $value: -ocha-comparison-value($assert);
  $result: if($value <= $ceiling, true, false);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($result, true, $assert,
      '#{$value} is at most #{$ceiling}',
      'Expected #{$value} to be at most #{$ceiling}'
    );
  }
  @else {
    @return -ocha-check-equal($result, false, $assert,
      '#{$value} is not at most #{$ceiling}',
      'Expected #{$value} to not be at most #{$ceiling}'
    );
  }

  @return $assert;
}

@function -ocha-within($assert, $range) {
  $floor: nth($range, 1);
  $ceiling: nth($range, 2);
  $string: '#{$floor}..#{$ceiling}';

  $value: -ocha-comparison-value($assert);
  $result: if($value >= $floor and $value <= $ceiling, true, false);
  $negative: map-get($assert, negative);

  @if not $negative {
    @return -ocha-check-equal($result, true, $assert,
      '#{$value} is within #{$string}',
      'Expected #{$value} to be within #{$string}'
    );
  }
  @else {
    @return -ocha-check-equal($result, false, $assert,
      '#{$value} is not within #{$string}',
      'Expected #{$value} to not be within #{$string}'
    );
  }

  @return $assert;
}
